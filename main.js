!function(){"use strict";var t=class{constructor(t,e,s){this._data=t,this._cardSelector=e,this._handleImageClick=s,this._getTemplate(),this._setEventListeners()}_getTemplate(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._title=this._cardElement.querySelector(".card__title")}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._data)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeIcon()})),this._deleteButton.addEventListener("click",(()=>{this._deleteCard()}))}_handleLikeIcon(){this._likeButton.classList.toggle("card__like-button_solid")}_deleteCard(){this._cardElement.remove(),this._cardElement=null}generateCard(){return this._cardImage.src=this._data.link,this._cardImage.alt=this._data.name,this._title.textContent=this._data.name,this._cardElement}};class e{constructor(t,e){this._settings=t,this._formElement=e,this._inputList=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector)}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)}_showInputError(t,e){const s=this._formElement.querySelector(`#${t.id}-error`);t.classList.add(this._settings.inputErrorClass),s.textContent=e,s.classList.add(this._settings.errorClass)}_hideInputError(t){const e=this._formElement.querySelector(`#${t.id}-error`);t.classList.remove(this._settings.inputErrorClass),e.textContent="",e.classList.remove(this._settings.errorClass)}_setEventListeners(){this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}enableValidation(){this._setEventListeners(),this._toggleButtonState()}resetValidation(){this._inputList.forEach((t=>{this._hideInputError(t)})),this._toggleButtonState()}disableButton(){this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0}}var s=class{constructor({popupSelector:t}){this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popup.addEventListener("mousedown",(t=>{(t.target.classList.contains("modal_opened")||t.target.classList.contains("modal__close"))&&this.close()}))}},n=class extends s{constructor(t,e){super({popupSelector:t}),this._handleFormSubmit=e,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form?this._form.querySelectorAll(".modal__input"):[]}_getInputValues(){return this._formValues={},this._inputList.forEach((t=>{this._formValues[t.name]=t.value})),this._formValues}getForm(){return this._form}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}};const i=document.querySelector(".profile__edit-button"),o=document.querySelector(".profile__add-button"),r=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-description-input"),l=new class{constructor({nameSelector:t,infoSelector:e,imageSelector:s}){this._nameElement=document.querySelector(t),this._infoElement=document.querySelector(e)}getUserInfo(){return{title:this._nameElement.textContent,description:this._infoElement.textContent}}setUserInfo({title:t,description:e,image:s}){this._nameElement.textContent=t,this._infoElement.textContent=e}}({nameSelector:".profile__title",infoSelector:".profile__description"}),c=new class{constructor({items:t,renderer:e},s){this._items=t,this._renderer=e,this._container=document.querySelector(s)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:d},".cards__list");function d(e){const s=function(e){return new t(e,"#card-template",u).generateCard()}(e);c.addItem(s)}function u({name:t,link:e}){_.open(t,e)}c.renderItems();const _=new class extends s{constructor(t){super({popupSelector:t}),this._image=this._popup.querySelector(".modal__image"),this._caption=this._popup.querySelector(".modal__caption")}open(t,e){console.log(t,e),this._image.src=e,this._image.alt=t,this._caption.textContent=t,super.open()}}("#preview-image-modal");_.setEventListeners();const m=new n("#add-card-modal",(function(t){d({name:t.title,link:t.link}),m.close(),p["card-form"].disableButton(),m.getForm().reset()}));m.setEventListeners();const h=new n("#profile-edit-modal",(function(t){console.log(t),l.setUserInfo({title:t.title,description:t.description}),h.close()}));h.setEventListeners(),i.addEventListener("click",(()=>{const t=l.getUserInfo();r.value=t.title,a.value=t.description,p["profile-form"].resetValidation(),h.open()})),o.addEventListener("click",(()=>{m.open()}));const p={};var E;E={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_inactive",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",formSelector:".modal__form"},Array.from(document.querySelectorAll(E.formSelector)).forEach((t=>{const s=new e(E,t),n=t.getAttribute("name");p[n]=s,s.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,